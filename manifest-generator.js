var fs = require('fs');
var watch = require('node-watch');
var radm = require('render-appcache-manifest');
var glob = require('glob');

module.exports = function(directory, outFilename) {
	var result = {};

	var watcher;
	var dir = directory;

	result.generate = function(cb, options, err) {
		options = options || {};

		var contents = {
			// By default we want to completely disable all access to the 
			// outside world for static resources
			network: options.network || [],
			cache: [],
			fallback: options.fallback || {'/': '/offline.html'},
			lastModified: new Date(),
			comment: options.comment || "Generated by App Cache Nanny"
		};

		glob('**/*.*', {cwd: dir}, function(error, files) {
			if (error && err) {
				return err(error);
			}

			files.forEach(function(element, index, array) {
				if (element.indexOf(outFilename) == -1) {
					contents.cache.push(element);
				}
			})
		})
			.on('end', function() {
				var output = radm(contents);

				if (outFilename) {
					fs.writeFile(outFilename, output, function(error) {
						if (error) {
							if (err) err(error);
							return;
						}
					});
				}

				if (cb) cb(output);
			});
	}

	result.startWatching = function(cb, options, err) {
		if (watcher) {
			this.stopWatching();
		}

		watcher = watch(dir, function(file) {
			if (!/\.manifest$/.test(file)) {
				result.generate(cb, options, err);
			}
		});
	}

	result.stopWatching = function() {
		watcher.close();
		watcher = undefined;
	}

	return result;
}